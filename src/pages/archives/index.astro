---
import { getCollection } from 'astro:content';
import Head from '../../components/Head.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.vue';
import { config_site } from '../../utils/config-adapter';
import '../../../src/styles/global.styl';
import { processFrontmatter } from '../../utils/process-frontmatter';
import dayjs from 'dayjs';
import '../../styles/pages/archives/index.styl';

// 获取文章集合
const allPosts = await getCollection('posts');
const processedPosts = await Promise.all(allPosts.map(post => processFrontmatter(post)));

// 按日期排序
const sortedPosts = processedPosts.sort((a, b) => {
  const dateA = a.data.date ? new Date(a.data.date).getTime() : 0;
  const dateB = b.data.date ? new Date(b.data.date).getTime() : 0;
  return dateB - dateA;
});

// 按年月分组
const archivesByYearMonth: Record<number, Record<number, typeof sortedPosts>> = {};
sortedPosts.forEach(post => {
  if (!post.data.date) return;
  
  const date = dayjs(post.data.date);
  const year = date.year();
  const month = date.month() + 1; // dayjs 月份从 0 开始
  
  // 确保年份存在
  if (!archivesByYearMonth[year]) {
    archivesByYearMonth[year] = {};
  }
  
  // 确保月份存在
  if (!archivesByYearMonth[year][month]) {
    archivesByYearMonth[year][month] = [];
  }
  
  // 将文章添加到对应的年月下
  archivesByYearMonth[year][month].push(post);
});

// 按年份降序排序
const sortedYears = Object.keys(archivesByYearMonth)
  .map(Number)
  .sort((a, b) => b - a);

// 页面标题
const pageTitle = '文章归档 | ' + config_site.title;
---

<!DOCTYPE html>
<html lang={config_site.lang}>
  <Head 
    title={pageTitle}
    description="按时间归档的文章列表"
    author={config_site.author}
    url={config_site.url + '/archives/'}
    noindex={true}
  >
  </Head>
  <body>
    <script>
      import '../../scripts/background.ts';
    </script>
    <Header />
    <main class="archives-container">
      <div class="page-header">
        <h1 class="page-title">文章归档</h1>
        <p class="page-description">时间轴上的所有文章（共 {sortedPosts.length} 篇）</p>
      </div>

      <div class="timeline-container">
        {sortedYears.length > 0 ? (
          sortedYears.map(year => (
            <div class="year-section">
              <div class="year-header">
                <h2 class="year-title">{year}</h2>
                <div class="year-count">
                  {Object.values(archivesByYearMonth[year]).flat().length} 篇文章
                </div>
              </div>
              
              {Object.keys(archivesByYearMonth[year])
                .map(Number)
                .sort((a, b) => b - a) // 月份降序排列
                .map(month => (
                <div class="month-section">
                  <h3 class="month-title">{month}月</h3>
                  <ul class="post-list">
                    {archivesByYearMonth[year][month].map(post => (
                      <li class="post-item">
                        <div class="post-date">
                          {dayjs(post.data.date).format('YYYY-MM-DD')}
                        </div>
                        <a href={`/posts/${post.data.abbrlink}/`} class="post-link">
                          {post.data.title}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          ))
        ) : (
          <div class="no-posts">暂无文章</div>
        )}
      </div>
      
      <!-- 懒加载指示器 -->
      <div id="lazyload-observer" class="lazyload-observer">
        <div class="loading-spinner">
          <span class="dot"></span>
          <span class="dot"></span>
          <span class="dot"></span>
        </div>
        <div class="loading-text">加载更多内容</div>
      </div>
    </main>
    <Footer />
    
    <script>
      // 懒加载实现
      document.addEventListener('DOMContentLoaded', () => {
        // 初始化显示的内容数量
        let visibleYears = 2;
        
        // 获取所有年份区块
        const yearSections = document.querySelectorAll('.year-section');
        const totalYears = yearSections.length;
        const lazyloadObserver = document.getElementById('lazyload-observer');
        
        // 更新加载指示器状态
        const updateLoadingIndicator = (isLoading, isComplete) => {
          if (!lazyloadObserver) return;
          
          const loadingText = lazyloadObserver.querySelector('.loading-text');
          const loadingSpinner = lazyloadObserver.querySelector('.loading-spinner');
          
          if (isComplete) {
            if (loadingText) loadingText.textContent = '已加载全部内容';
            if (loadingSpinner) loadingSpinner.style.display = 'none';
            // 3秒后隐藏加载指示器
            setTimeout(() => {
              lazyloadObserver.style.opacity = '0';
              setTimeout(() => {
                lazyloadObserver.style.display = 'none';
              }, 500);
            }, 3000);
          } else {
            if (loadingText) loadingText.textContent = isLoading ? '正在加载...' : '滚动加载更多';
          }
        };
        
        // 显示指定的年份区块
        const showYearSection = (index) => {
          if (index >= 0 && index < totalYears && yearSections[index]) {
            const section = yearSections[index];
            section.style.display = 'block';
            section.style.opacity = '0';
            
            // 使用 setTimeout 让 CSS 动画生效
            setTimeout(() => {
              section.style.opacity = '1';
              section.style.transform = 'translateY(0)';
            }, 50);
          }
        };
        
        // 初始状态：只显示前几年的内容
        if (totalYears > 0) {
          for (let i = 0; i < totalYears; i++) {
            if (i < visibleYears) {
              showYearSection(i);
            } else {
              yearSections[i].style.display = 'none';
            }
          }
          
          // 如果内容较少，隐藏加载指示器
          if (totalYears <= visibleYears && lazyloadObserver) {
            updateLoadingIndicator(false, true);
          }
        }
        
        // 创建 Intersection Observer
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && visibleYears < totalYears) {
              // 当观察元素进入视口时，显示更多内容
              updateLoadingIndicator(true, false);
              
              // 延迟加载，模拟网络请求
              setTimeout(() => {
                showYearSection(visibleYears);
                visibleYears++;
                
                // 如果已经加载完所有内容，更新加载指示器状态
                if (visibleYears >= totalYears) {
                  updateLoadingIndicator(false, true);
                } else {
                  updateLoadingIndicator(false, false);
                }
              }, 300);
            }
          });
        }, {
          rootMargin: '300px', // 提前 300px 触发加载，增加提前量
          threshold: 0.1
        });
        
        // 开始观察懒加载指示器
        if (lazyloadObserver) {
          observer.observe(lazyloadObserver);
        } else {
          console.warn('懒加载指示器元素未找到');
        }
        
        // 添加错误处理
        window.addEventListener('error', (e) => {
          if (e.message.includes('lazyload') || e.message.includes('observer')) {
            console.error('懒加载功能出现错误:', e);
          }
        });
      });
    </script>
  </body>
</html>