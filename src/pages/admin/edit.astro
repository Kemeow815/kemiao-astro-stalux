---
import Head from "../../components/Head.vue";
import Footer from "../../components/Footer.vue";
import { MdEditor, MdPreview } from 'md-editor-v3';
import 'md-editor-v3/lib/style.css';

// 如果存在 filename 参数，我们需要获取现有文章的内容
const { filename } = Astro.url.searchParams;
let post = { content: '', frontmatter: {} };

if (filename) {
  try {
    const res = await fetch(`http://localhost:3001/api/posts/${filename}`);
    if (res.ok) {
      post = await res.json();
    }
  } catch (error) {
    console.error('Failed to fetch post:', error);
  }
}
---

<html lang="zh-cn">
  <Head title={filename ? `编辑文章 - ${filename}` : "新建文章"} description="Markdown 文章编辑器" />
  <body>
    <div class="editor-container">
      <header class="editor-header">
        <h1>{filename ? `编辑文章: ${filename}` : "新建文章"}</h1>
        <a href="/admin" class="back-btn">返回文章列表</a>
      </header>
      
      <div class="editor-content">
        <div class="frontmatter-section">
          <h2>文章属性</h2>
          <div class="form-group">
            <label for="title">标题:</label>
            <input type="text" id="title" value={post.frontmatter?.title || ''} />
          </div>
          <div class="form-group">
            <label for="date">日期:</label>
            <input type="date" id="date" value={post.frontmatter?.date || new Date().toISOString().split('T')[0]} />
          </div>
          <div class="form-group">
            <label for="tags">标签 (用逗号分隔):</label>
            <input type="text" id="tags" value={post.frontmatter?.tags?.join(', ') || ''} />
          </div>
          <div class="form-group">
            <label for="filename">文件名 (带 .md 后缀):</label>
            <input 
              type="text" 
              id="filename" 
              value={filename || ''} 
              placeholder="example.md"
              readonly={Boolean(filename)}
            />
          </div>
        </div>
        
        <div class="markdown-editor">
          <MdEditor 
            modelValue={post.content || ''} 
            theme="dark" 
            previewTheme="dark"
            codeTheme="dracula"
            showCodeRowNumber
            autoFocus
            client:load
          />
        </div>
        
        <div class="editor-actions">
          <button id="save-btn" class="save-btn">保存文章</button>
        </div>
      </div>
    </div>
    <Footer />
  </body>
</html>

<style>
  :root {
    color-scheme: dark;
  }
  
  body {
    background-color: #1e1e1e;
    color: #e0e0e0;
    margin: 0;
    padding: 0;
  }
  
  .editor-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem 2rem;
  }
  
  .editor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #444;
  }
  
  .back-btn {
    background-color: #444;
    color: white;
    padding: 0.6rem 1.2rem;
    border-radius: 4px;
    text-decoration: none;
    font-weight: bold;
    transition: background-color 0.2s;
  }
  
  .back-btn:hover {
    background-color: #555;
  }
  
  .frontmatter-section {
    background-color: #2d2d2d;
    padding: 1.5rem;
    border-radius: 6px;
    margin-bottom: 1.5rem;
  }
  
  .form-group {
    margin-bottom: 1rem;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
  }
  
  .form-group input {
    width: 100%;
    padding: 0.75rem;
    border-radius: 4px;
    border: 1px solid #444;
    background: #333;
    color: white;
    font-size: 1rem;
  }
  
  .markdown-editor {
    margin-bottom: 1.5rem;
    border-radius: 6px;
    overflow: hidden;
    /* 确保 md-editor-v3 组件具有足够的高度 */
    min-height: 60vh;
  }
  
  .editor-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 1.5rem;
  }
  
  .save-btn {
    background-color: #4CAF50;
    color: white;
    padding: 0.75rem 2rem;
    border: none;
    border-radius: 4px;
    font-size: 1.1rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .save-btn:hover {
    background-color: #43a047;
  }

  /* 专门针对 md-editor-v3 的一些覆盖样式 */
  :global(.md-editor) {
    height: 60vh !important;  /* 为编辑器设置固定高度 */
    border: 1px solid #444 !important;
  }
  
  :global(.md-editor-dark),
  :global(.md-editor-dark .md-editor-toolbar) {
    background-color: #2d2d2d !important;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const saveBtn = document.getElementById('save-btn');
    const titleInput = document.getElementById('title');
    const dateInput = document.getElementById('date');
    const tagsInput = document.getElementById('tags');
    const filenameInput = document.getElementById('filename');
    
    // 保存文章的函数
    saveBtn.addEventListener('click', async () => {
      try {
        // 获取 MdEditor 的内容
        const editorElement = document.querySelector('.md-editor');
        // 通过 __vue__ 访问组件实例以获取编辑器内容
        // 注意: 这是一种技巧，通常不是推荐的方式，但对于这个场景很有用
        const editorContent = editorElement?.__vue__?.modelValue || '';
        
        if (!editorContent) {
          alert('文章内容不能为空');
          return;
        }
        
        if (!filenameInput.value || !filenameInput.value.endsWith('.md')) {
          alert('请输入有效的文件名，必须以 .md 结尾');
          return;
        }
        
        // 准备 frontmatter 数据
        const frontmatter = {
          title: titleInput.value || '无标题',
          date: dateInput.value,
          tags: tagsInput.value.split(',').map(tag => tag.trim()).filter(Boolean)
        };
        
        // 检查是编辑还是创建
        const isEditing = Boolean(new URLSearchParams(window.location.search).get('filename'));
        const filename = filenameInput.value;
        
        // 发起 API 请求
        const url = isEditing 
          ? `http://localhost:3001/api/posts/${filename}`
          : `http://localhost:3001/api/posts`;
        
        const method = isEditing ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            filename: isEditing ? undefined : filename,
            content: editorContent,
            frontmatter
          })
        });
        
        if (response.ok) {
          alert(isEditing ? '文章更新成功!' : '文章创建成功!');
          // 跳转回文章列表页
          window.location.href = '/admin';
        } else {
          const error = await response.json();
          alert(`保存失败: ${error.error || '未知错误'}`);
        }
      } catch (err) {
        console.error('Error saving post:', err);
        alert('保存文章时出错，请查看控制台了解详情。');
      }
    });
  });
</script>