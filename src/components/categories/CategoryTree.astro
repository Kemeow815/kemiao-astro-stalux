---
import type { CategoryNode, CategoryTreesResult } from './CategoryUtils';
import CategoryNodeComponent from './CategoryNode.astro';
import DeepNestedCategories from './DeepNestedCategories.astro';

interface Props {
  categoriesData: CategoryTreesResult;
  currentPath: string;
}

const { categoriesData, currentPath } = Astro.props;
---

<div class="post-categories">
  <span class="categories-label">分类：</span>
  <div class="category-trees-container">
    {/* 显示前3层分类树 */}
    {categoriesData.trees.map((rootCategory) => (
      <div class="category-tree">
        {/* 渲染根分类 (第1层) */}
        <CategoryNodeComponent
          category={rootCategory}
          currentPath={currentPath}
        />
        
        {/* 渲染子分类 (第2层) */}
        {rootCategory.children.length > 0 && (
          <div class="subcategories-container">
            {rootCategory.children.map((child) => (
              <div class="subcategory-branch">
                <CategoryNodeComponent
                  category={child}
                  currentPath={currentPath}
                  isChild={true}
                />
                
                {/* 渲染孙分类 (第3层) */}
                {child.children.length > 0 && (
                  <div class="grandchildren-container">
                    {child.children.map((grandchild) => (
                      <div class="grandchild-branch">
                        <CategoryNodeComponent
                          category={grandchild}
                          currentPath={currentPath}
                          isGrandchild={true}
                        />
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    ))}
    
    {/* 显示深层嵌套分类（第4-9层）作为平铺标签 */}
    {categoriesData.deepNestedCategories.length > 0 && (
      <DeepNestedCategories 
        categories={categoriesData.deepNestedCategories} 
        currentPath={currentPath} 
      />
    )}
  </div>
</div>

<style lang="stylus">
/* 分类树样式 */
.post-categories {
  display: flex
  flex-direction: column
  gap: 0.5rem
  margin-top: 1rem
  color: rgba(255, 255, 255, 0.7)
  font-size: 0.9rem
}

.categories-label {
  margin-bottom: 0.3rem
  opacity: 0.8
  font-weight: 500
}

.category-trees-container {
  display: flex
  flex-wrap: wrap
  gap: 1rem
  align-items: flex-start
}

.category-tree {
  position: relative
  margin-bottom: 0.5rem
  padding: 0.5rem
  background: rgba(0, 0, 0, 0.1)
  border-radius: 0.4rem
  min-width: 200px
  max-width: 280px
  border: 1px solid rgba(1, 162, 190, 0.1)
}

.post-category {
  display: inline-flex
  align-items: center
  font-size: 0.85rem
  padding: 0.25rem 0.6rem
  border-radius: 0.3rem
  text-decoration: none
  transition: all 0.25s ease
  position: relative
  max-width: 100%
  backdrop-filter: blur(2px)
  white-space: nowrap
  overflow: hidden
  text-overflow: ellipsis
  color: #ffffff

  &.root-category {
    background: linear-gradient(135deg, rgba(1, 162, 190, 0.2), rgba(1, 162, 190, 0.15))
    color: #ffffff
    font-weight: 600
    padding-left: 0.4rem
    border-radius: 0.4rem
    border-left: 3px solid rgba(1, 162, 190, 0.7)
    box-shadow: 0 1px 3px rgba(0,0,0,0.1)
    margin-left: 0
    display: flex
    width: 100%
    margin-bottom: 0.5rem
  }
  
  &.child-category {
    background: linear-gradient(135deg, rgba(11, 122, 157, 0.15), rgba(11, 122, 157, 0.1))
    max-width: 100%
    box-shadow: 0 1px 2px rgba(0,0,0,0.05)
    margin: 0.2rem 0
    width: 100%
  }
  
  &.grandchild-category {
    background: linear-gradient(135deg, rgba(22, 80, 100, 0.12), rgba(22, 80, 100, 0.08))
    font-size: 0.8rem
    padding: 0.2rem 0.5rem
    margin: 0.1rem 0 0.1rem 1rem
    width: calc(100% - 1rem)
  }
  
  &.current-category {
    background: linear-gradient(135deg, rgba(1, 162, 190, 0.35), rgba(1, 162, 190, 0.25))
    box-shadow: 0 0 0 1px rgba(1, 162, 190, 0.4), 0 1px 5px rgba(1, 162, 190, 0.15)
    color: #ffffff
    font-weight: 500
    
    &:after {
      content: ""
      position: absolute
      top: 0
      left: 0
      right: 0
      bottom: 0
      border-radius: 0.3rem
      background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1))
      pointer-events: none
    }
  }
  
  &:hover {
    background: linear-gradient(135deg, rgba(1, 162, 190, 0.3), rgba(1, 162, 190, 0.2))
    color: #ffffff
    transform: translateY(-1px)
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15)
  }
}

.tree-indicator {
  display: inline-flex
  margin-right: 0.4rem
  color: rgba(1, 162, 190, 0.9)
  filter: drop-shadow(0 1px 1px rgba(0, 0, 0, 0.2))
  flex-shrink: 0
}

.subcategories-container {
  position: relative
  display: flex
  flex-direction: column
  width: 100%
}

.grandchildren-container {
  display: flex
  flex-direction: column
  width: 100%
}

.subcategory-branch, .grandchild-branch {
  position: relative
  display: flex
  flex-direction: column
  width: 100%
}

.branch-node {
  display: inline-flex
  margin-right: 0.3rem
  width: 0.3rem
  height: 0.3rem
  background: rgba(1, 162, 190, 0.7)
  border-radius: 50%
  box-shadow: 0 0 2px rgba(1, 162, 190, 0.5)
  position: static
  transform: none
  
  &.small {
    width: 0.2rem
    height: 0.2rem
    background: rgba(1, 162, 190, 0.5)
  }
}

// 响应式调整
@media (max-width: 768px) {
  .category-tree {
    min-width: 100%
    max-width: 100%
  }
  
  .post-category {
    max-width: 100%
  }
}
</style>