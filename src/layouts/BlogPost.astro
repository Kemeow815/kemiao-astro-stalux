---
import type { CollectionEntry } from 'astro:content';
import type { MarkdownHeading } from 'astro';
import Head from '../components/Head.vue';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.vue';
import '../styles/layouts/BlogPost.styl';
// 正确定义Props类型
interface Props {
    title: string;
    date?: string | Date;
    updated?: string | Date;
    tags?: string[];
    categories?: any[]; // 添加categories属性
    headings?: MarkdownHeading[];
	description?: string;
}

const { title, date, updated, tags, categories, headings = [],description } = Astro.props;
import '../styles/blog.styl'
import '../styles/global.styl'
import LeftSiderbar from './LeftSiderbar.astro';
import RightSiderbar from './RightSiderbar.astro';

function description150(description: string): string {
	// 去除Markdown标识符并截取约150个字符
	const plainText = description
		.replace(/#+\s/g, '')                  // 移除标题符号
		.replace(/\*\*|\*|~~|__|_/g, '')       // 移除粗体、斜体、删除线等格式
		.replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // 将[链接文字](URL)转换为纯文本
		.replace(/!\[([^\]]*)\]\([^)]+\)/g, '') // 移除图片
		.replace(/```[\s\S]*?```/g, '')        // 移除代码块
		.replace(/`([^`]+)`/g, '$1')           // 移除行内代码
		.replace(/>\s?/g, '')                  // 移除引用标记
		.replace(/\n+/g, '')                   // 完全移除换行符
		.replace(/\s+/g, '')                   // 移除所有空格
		.trim();
	
	if (plainText.length > 150) {
		return plainText.slice(0, 145) + '...';
	}
	return plainText;
}

---

<html lang="zh-CN">
	<Head 
		title={title}
		description={description150(description) || '这是默认的文章描述'}
		author="站点作者"
	/>
	<body>
		<Header />
		<main>
			<div class="main-content">
				<LeftSiderbar />
				<article class="article-content">
					<div class="hero-image">
						<!-- 如果有特色图片可以在这里添加 -->
					</div>
					<div class="prose fade-in-up delay-200">
						<div class="title">
							<h1>{title}</h1>
							<div class="date">
								{date && (
									<div class="published-on">
										发布时间：<time>{date instanceof Date ? date.toLocaleDateString() : date}</time>
									</div>
								)}
								{updated && (
									<div class="last-updated-on">
										更新时间：<time>{updated instanceof Date ? updated.toLocaleDateString() : updated}</time>
									</div>
								)}
							</div>
							<hr />
						</div>
						<slot />
					</div>
				</article>
				<RightSiderbar {tags} {categories} {headings} />
			</div>
		</main>
		<Footer />
	</body>
	<script>
		import '../scripts/background.ts';
		
		// 为文章内容中的所有图片添加懒加载
		document.addEventListener('DOMContentLoaded', () => {
			const articleImages = document.querySelectorAll('.article-content img');
			
			// 为每个图片添加懒加载属性
			articleImages.forEach(img => {
				// 如果没有loading属性，添加loading="lazy"
				if (!img.hasAttribute('loading')) {
					img.setAttribute('loading', 'lazy');
				}
				
				// 添加淡入效果类
				img.classList.add('lazy-image');
				
				// 监听图片加载完成事件
				img.addEventListener('load', () => {
					img.classList.add('loaded');
				});
				
				// 处理图片加载错误
				img.addEventListener('error', () => {
					console.warn('图片加载失败:', (img as HTMLImageElement).src);
					// 可以在这里添加一个占位图
					// (img as HTMLImageElement).src = '/images/placeholder.svg';
				});
			});
			
			// 使用 Intersection Observer API 监测图片可见性
			if ('IntersectionObserver' in window) {
				const imageObserver = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							const img = entry.target;
							// 如果有data-src属性，则加载该图片
							const dataSrc = img.getAttribute('data-src');
							if (dataSrc) {
								(img as HTMLImageElement).src = dataSrc;
								img.removeAttribute('data-src');
							}
							imageObserver.unobserve(img);
						}
					});
				}, {
					rootMargin: '200px 0px', // 提前200px加载
					threshold: 0.01
				});
				
				// 观察所有图片
				articleImages.forEach(img => {
					imageObserver.observe(img);
				});
			}
		});
	</script>

	<!-- 添加响应式视口设置 -->
	<style>
		/* 图片懒加载相关样式 */
		.lazy-image {
			opacity: 0;
			transition: opacity 0.5s ease;
		}
		
		.lazy-image.loaded {
			opacity: 1;
		}
	</style>
</html>

