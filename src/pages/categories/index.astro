---
import { getCollection } from 'astro:content';
import Head from '../../components/Head.vue';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.vue';
import { config_site } from '../../utils/config-adapter';
import '../../../src/styles/global.styl';
import '../../styles/pages/categories/index.styl';

// 获取文章集合 - 直接使用内容集合API
const posts = await getCollection('posts');

// 定义分类节点的接口
interface CategoryNode {
  name: string;
  path: string;
  count: number;
  children: Record<string, CategoryNode>;
  posts: Array<{ id: string; slug: string; title: string }>;
  sortedChildren?: CategoryNode[];
}

// 提取并组织所有分类，构建三级嵌套结构
function extractNestedCategories(posts) {
  const categoryTree: Record<string, CategoryNode> = {};
  
  // 递归收集分类路径
  function collectCategoryPaths(categories, parentPath = '', tree = categoryTree) {
    if (!categories || !Array.isArray(categories)) return;
    
    categories.forEach(category => {
      // 处理字符串格式
      if (typeof category === 'string') {
        const catName = category;
        const currentPath = parentPath ? `${parentPath}/${catName}` : catName;
        
        if (!tree[catName]) {
          tree[catName] = {
            name: catName,
            path: currentPath,
            count: 0,
            children: {},
            posts: []
          };
        }
        return;
      }
      
      // 处理对象格式
      if (category && typeof category === 'object') {
        // 处理 {name, subcategories} 格式
        if (category.name) {
          const catName = category.name;
          const currentPath = parentPath ? `${parentPath}/${catName}` : catName;
          
          if (!tree[catName]) {
            tree[catName] = {
              name: catName,
              path: currentPath,
              count: 0,
              children: {},
              posts: []
            };
          }
          
          // 递归处理子分类
          if (category.subcategories && Array.isArray(category.subcategories)) {
            collectCategoryPaths(category.subcategories, currentPath, tree[catName].children);
          }
          return;
        }
        
        // 处理 {'category': [subcategories]} 格式
        const keys = Object.keys(category);
        if (keys.length > 0) {
          const catName = keys[0];
          const currentPath = parentPath ? `${parentPath}/${catName}` : catName;
          
          if (!tree[catName]) {
            tree[catName] = {
              name: catName,
              path: currentPath,
              count: 0,
              children: {},
              posts: []
            };
          }
          
          // 递归处理子分类
          const subCategories = category[catName];
          if (Array.isArray(subCategories)) {
            collectCategoryPaths(subCategories, currentPath, tree[catName].children);
          }
        }
      }
    });
  }
  
  // 计算每个分类下的文章数量
  function countPostsInCategories() {
    // 检查文章是否属于某个分类
    function isPostInCategory(post, targetPath) {
      if (!post.data.categories) return false;
      
      const categories = Array.isArray(post.data.categories) ? post.data.categories : [post.data.categories];
      const paths = [];
      
      // 构建所有可能的分类路径
      function buildCategoryPaths(cats, parentPath = '') {
        cats.forEach(cat => {
          if (typeof cat === 'string') {
            paths.push(parentPath ? `${parentPath}/${cat}` : cat);
          } else if (cat && cat.name) {
            const path = parentPath ? `${parentPath}/${cat.name}` : cat.name;
            paths.push(path);
            if (cat.subcategories) buildCategoryPaths(cat.subcategories, path);
          } else if (cat && typeof cat === 'object') {
            const key = Object.keys(cat)[0];
            if (key) {
              const path = parentPath ? `${parentPath}/${key}` : key;
              paths.push(path);
              if (Array.isArray(cat[key])) buildCategoryPaths(cat[key], path);
            }
          }
        });
      }
      
      buildCategoryPaths(categories);
      return paths.includes(targetPath);
    }
    
    // 递归处理分类节点
    function processNode(node, nodePath) {
      // 查找属于该分类的文章
      const postsInCategory = posts.filter(post => isPostInCategory(post, nodePath));
      node.count = postsInCategory.length;
      
      // 添加文章信息
      node.posts = postsInCategory.map(post => ({
        id: post.id,
        slug: post.slug,
        title: post.data.title || post.slug
      }));
      
      // 递归处理子分类
      Object.entries(node.children).forEach(([, childNode]) => {
        processNode(childNode, childNode.path);
      });
    }
    
    // 处理所有顶级分类
    Object.entries(categoryTree).forEach(([, node]) => {
      processNode(node, node.path);
    });
  }
  
  // 初始化分类结构
  posts.forEach(post => {
    if (post.data.categories) {
      const categories = Array.isArray(post.data.categories) ? post.data.categories : [post.data.categories];
      collectCategoryPaths(categories);
    }
  });
  
  // 计算文章数量
  countPostsInCategories();
  
  return categoryTree;
}

// 获取分类树并按文章数量排序
const categoryTree = extractNestedCategories(posts);

// 排序函数 - 按文章数量降序排列
function sortCategoriesByCount(categories) {
  return Object.entries(categories)
    .sort(([, a], [, b]) => b.count - a.count)
    .map(([, category]) => {
      if (Object.keys(category.children).length > 0) {
        category.sortedChildren = sortCategoriesByCount(category.children);
      }
      return category;
    });
}

const sortedCategories = sortCategoriesByCount(categoryTree);

// 页面标题
const pageTitle = '文章分类 | ' + config_site.title;
---

<!DOCTYPE html>
<html lang={config_site.lang}>
  <Head 
    title={pageTitle}
    description="所有文章分类列表，按主题分类索引"
    author={config_site.author}
    url={config_site.url + '/categories/'}
  >
    <meta name="robots" content="noindex, nofollow" slot="robots" />
  </Head>
  <body>
    <script>
      import '../../scripts/background.ts';
    </script>
    <Header />
    <main class="categories-container">
      <div class="page-header">
        <h1 class="page-title">文章分类</h1>
        <p class="page-description">按主题分类浏览</p>
      </div>

      <!-- 主分类卡片网格 -->
      <div class="categories-grid">
        {sortedCategories.length > 0 ? (
          sortedCategories.map((category) => (
            <div class={`category-card level-1 ${category.sortedChildren?.length ? 'has-children' : ''}`}>
              <a href={`/categories/${category.path}`} class="category-header">
                <div class="category-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
                  </svg>
                </div>
                <div class="category-content">
                  <h2 class="category-name">{category.name}</h2>
                  <div class="category-count">{category.posts.length} 篇文章</div>
                </div>
              </a>
              
              <!-- 二级子分类 -->
              {category.sortedChildren?.length > 0 && (
                <div class="subcategories level-2">
                  {category.sortedChildren.map((subCategory) => (
                    <div class={`subcategory-card ${subCategory.sortedChildren?.length ? 'has-children' : ''}`}>
                      <a href={`/categories/${subCategory.path}`} class="subcategory-header">
                        <h3 class="subcategory-name">{subCategory.name}</h3>
                        <div class="subcategory-count">{subCategory.posts.length} 篇文章</div>
                      </a>
                      
                      <!-- 三级子分类 (伪平铺) -->
                      {subCategory.sortedChildren?.length > 0 && (
                        <div class="subcategories level-3">
                          {subCategory.sortedChildren.map((thirdLevelCategory) => (
                            <a href={`/categories/${thirdLevelCategory.path}`} class="third-level-category">
                              {thirdLevelCategory.name} 
                              <span class="third-level-count">({thirdLevelCategory.posts.length})</span>
                            </a>
                          ))}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))
        ) : (
          <div class="no-categories">暂无分类</div>
        )}
      </div>
    </main>
    <Footer />
  </body>
</html>
